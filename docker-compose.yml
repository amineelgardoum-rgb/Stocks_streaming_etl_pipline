version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD","nc","-z","localhost","9092"]
      interval: 5s
      retries: 10
      start_period: 10s 
      timeout: 5s
      


  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9001:9001" # Console UI
      - "9002:9000" # S3 API
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 2s

  producer:
    build:
      context: ./producer
    container_name: producer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import socket; s=socket.socket(); s.connect(('kafka', 9092))\""]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s


  consumer:
    build:
      context: ./consumer
    container_name: consumer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      producer:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "nc", "-z", "kafka", "9092"]  # example: ensure Kafka port is open
    #   interval: 5s
    #   retries: 5
    #   start_period: 5s
    #   timeout: 2s

  dbt:
    build:
      context: ./dbt_stocks
    container_name: dbt-snowflake
    depends_on:
      - consumer
    volumes:
      - ./dbt_stocks:/usr/app
      - ${USERPROFILE}/.dbt:/root/.dbt
    environment:
      DBT_PROFILES_DIR: /root/.dbt
    entrypoint: ["dbt", "run"]

  airflow-webserver:
    image: apache/airflow:2.10.2
    container_name: airflow-webserver
    restart: always
    depends_on:
      - airflow-scheduler
      - postgres
      - producer
      - consumer
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.10.2
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - postgres
      - producer
      - consumer
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler

  postgres:
    image: postgres:15
    container_name: airflow-postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  airflow-init:
    image: apache/airflow:2.10.2
    container_name: airflow-init
    restart: "no"
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    entrypoint: > 
      /bin/bash -c "airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"

volumes:
  postgres_data:
